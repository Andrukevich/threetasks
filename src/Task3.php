<?phpnamespace App;class Task3{    //ДОПУЩЕНИЕ: согласно заданию предполагается ввод только одной последовательности символов    //допускается сочетание строчных и прописных букв английского алфавита    // доступ возможен только к конструктору класса и get методам,    // остальные методы и все свойства защищены инкапсуляцией    protected $primary_str;    protected $matches;    protected $long_str;    //конструктор класса, который принимает строку    public function __construct($primary_str)    {        $this->primary_str = $primary_str;        self::pattern();        self::take_long_str();    }    public function get_primary_str()    {        return $this->primary_str;    }    public function get_long_str()    {        return $this->long_str;    }    public function get_matches()    {        return $this->matches;    }//проверяет принадлежность букв английскому алфавиту,    protected function pattern()    {        $re = "/(\\b[a-zA-Z]+\\b)/";        preg_match($re, $this->primary_str, $matches);        $this->matches = $matches;    }    //Находить самую длинную уникальную последовательность букв    protected function take_long_str()    {        $cur_str = $this->matches[0];        $combination_str = [];        $inter_arr = [];        $inter_str= '';        $this->long_str = '';        for ($j=0; $j <= strlen($cur_str)-1; $j++ ) {            for ($i=$j; $i <= strlen($cur_str)-1; $i++) {                if (in_array($cur_str[$i],  $inter_arr)){                    break;                }else {                    array_push($inter_arr, $cur_str[$i]);                    $inter_str .= $cur_str[$i];                }            }            array_push($combination_str, $inter_str);            $inter_str= '';            $inter_arr = [];        }        foreach ($combination_str as $key => $value) {            (strlen($value) > strlen($this->long_str)) ? $this->long_str = $value : NULL;        }    }}